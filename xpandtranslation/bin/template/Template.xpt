«IMPORT metamodel»
«IMPORT bankSystem»

«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR BankSystem»
 	«FILE "example2.sql"»
DROP DATABASE bankSystem;
CREATE DATABASE banksystem;
USE banksystem;
CREATE TABLE bank(
 	id varchar(36) PRIMARY KEY,
 	name varchar(36),
 	country varchar(36)
);
 CREATE TABLE user(
 	id varchar(36) PRIMARY KEY,
 	name varchar(36),
 	email varchar(64),
 	hashpass varchar(64),
 	address varchar(128)
 );
CREATE TABLE account(
	id varchar(36) PRIMARY KEY,
	bankId varchar(36),
 	userId varchar(36),
 	balance DOUBLE,
 	accountNum varchar(36),
 	mfaType varchar(36),
 	type ENUM('Mortgage', 'Savings', 'Checking'),
 	intRate INT,
 	loanPeriod varchar(36),
 	debPerMonth INT,
 	FOREIGN KEY (bankId) REFERENCES bank(id),
 	FOREIGN KEY (userId) REFERENCES user(id)
 );
 CREATE TABLE branch(
 	id varchar(36) PRIMARY KEY,
 	bankId varchar(36),
 	address varchar(128),
 	hasVault BOOLEAN,
 	hasBooth BOOLEAN,
 	FOREIGN KEY (bankId) REFERENCES bank(id)
 );
  CREATE TABLE employee(
 	id varchar(36) PRIMARY KEY,
 	branchId varchar(36),
 	name varchar(36),
 	salary DOUBLE,
 	currentRole ENUM('Manager', 'Teller'),
 	 FOREIGN KEY (branchId) REFERENCES branch(id)
 );
 CREATE TABLE Transaction(
 	id varchar(36) PRIMARY KEY,
 	bankId varchar(36),
 	accountID varchar(36),
	amount DOUBLE,
 	debit BOOLEAN,
 	vendorName varchar(256),
 	FOREIGN KEY (bankId) REFERENCES bank(id),
 	FOREIGN KEY (accountID) REFERENCES account(id)
 );			
«EXPAND user FOREACH users»
«EXPAND bank FOREACH banks»		
	«ENDFILE»
«ENDDEFINE»


«DEFINE bank FOR Bank»
INSERT INTO bank (id, name, country) VALUES(UUID(), '«name»', '«countryOfOrigin»');
	«EXPAND branch(name) FOREACH branches»
	«EXPAND account(name) FOREACH accounts»
	«EXPAND transaction(name) FOREACH transactions»
«ENDDEFINE»

«DEFINE user FOR User»
INSERT INTO user (id, name, email, hashpass, address) VALUES(UUID(), '«name»', '«email»', '«hashpass»', '«address»');
«ENDDEFINE»

«DEFINE branch(String bankName) FOR Branch»
	INSERT INTO branch (id, bankID, address, hasVault, hasBooth) 
	VALUES(UUID(), (SELECT id FROM bank where name = '«bankName»') , '«address»',«myVault.length > 0» , «mybooth.length > 0»);
	«EXPAND employee(address) FOREACH employees»
«ENDDEFINE»
«DEFINE employee(String branchAddress) FOR Employee»
INSERT INTO employee(id, branchID, name, salary, currentRole)
VALUES (UUID(), (SELECT id FROM branch WHERE address= '«branchAddress»'), '«name»', «salary», '«currentRole»');
«ENDDEFINE»  

«DEFINE account(String bankName) FOR Account»
	INSERT INTO account (id, bankID, userID, balance, accountNum, mfaType)
	VALUES(UUID(), (SELECT id FROM bank where name = '«bankName»'), (SELECT id FROM user where name = '«holder»'), «balance», '«accountNum»', '«mfaType»');
 	«IF this.accountType.toString() == 'Savings Account'»
 		UPDATE account
 		SET type = 'Savings', intRate = «this.intRate»
 		WHERE accountNum = '«accountNum»';
 	«ELSEIF this.accountType.toString() == 'Mortgage Account'»
 		UPDATE account
 		SET type = 'Mortgage', loanPeriod = '«this.loanPeriod»'
 		WHERE accountNum = '«accountNum»';
 	«ELSE»
 		UPDATE account
 		SET type = 'Checking', debPerMonth = «this.debPerMonth»
 		WHERE accountNum = '«accountNum»';
 	«ENDIF»
«ENDDEFINE»

«DEFINE transaction(String bankName) FOR Transaction»
	INSERT INTO transaction (id, bankID, accountID, amount, debit, vendorName)
	VALUES(UUID(), (SELECT id FROM bank where name = '«bankName»'), (SELECT id FROM account where accountNum = '«account»'), «amount»,  «debit», '«vendorName»');
«ENDDEFINE»