/*
 * generated by Xtext 2.14.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.bankSystem.Account;
import org.xtext.bankSystem.Bank;
import org.xtext.bankSystem.BankSystem;
import org.xtext.bankSystem.BankSystemPackage;
import org.xtext.bankSystem.Branch;
import org.xtext.bankSystem.Date;
import org.xtext.bankSystem.Employee;
import org.xtext.bankSystem.Transaction;
import org.xtext.bankSystem.User;
import org.xtext.services.BankSystemGrammarAccess;

@SuppressWarnings("all")
public class BankSystemSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BankSystemGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BankSystemPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BankSystemPackage.ACCOUNT:
				sequence_Account(context, (Account) semanticObject); 
				return; 
			case BankSystemPackage.BANK:
				sequence_Bank(context, (Bank) semanticObject); 
				return; 
			case BankSystemPackage.BANK_SYSTEM:
				sequence_BankSystem(context, (BankSystem) semanticObject); 
				return; 
			case BankSystemPackage.BRANCH:
				sequence_Branch(context, (Branch) semanticObject); 
				return; 
			case BankSystemPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case BankSystemPackage.EMPLOYEE:
				sequence_Employee(context, (Employee) semanticObject); 
				return; 
			case BankSystemPackage.TRANSACTION:
				sequence_Transaction(context, (Transaction) semanticObject); 
				return; 
			case BankSystemPackage.USER:
				sequence_User(context, (User) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Account returns Account
	 *
	 * Constraint:
	 *     (
	 *         accountNum=ID 
	 *         holder=ID 
	 *         balance=INT 
	 *         mfaType=STRING 
	 *         accountType=AccountType 
	 *         intRate=INT? 
	 *         depPerMonth=INT? 
	 *         loanPeriod=STRING?
	 *     )
	 */
	protected void sequence_Account(ISerializationContext context, Account semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BankSystem returns BankSystem
	 *
	 * Constraint:
	 *     (banks+=Bank+ users+=User+)
	 */
	protected void sequence_BankSystem(ISerializationContext context, BankSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bank returns Bank
	 *
	 * Constraint:
	 *     (name=ID countryOfOrigin=STRING branches+=Branch+ accounts+=Account* transactions+=Transaction*)
	 */
	protected void sequence_Bank(ISerializationContext context, Bank semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Branch returns Branch
	 *
	 * Constraint:
	 *     (address=STRING mybooth=Booth? myVault=Vault? employees+=Employee+)
	 */
	protected void sequence_Branch(ISerializationContext context, Branch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Date returns Date
	 *
	 * Constraint:
	 *     (year=INT month=INT day=INT)
	 */
	protected void sequence_Date(ISerializationContext context, Date semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.DATE__YEAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.DATE__YEAR));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.DATE__MONTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.DATE__MONTH));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.DATE__DAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.DATE__DAY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateAccess().getYearINTTerminalRuleCall_0_0(), semanticObject.getYear());
		feeder.accept(grammarAccess.getDateAccess().getMonthINTTerminalRuleCall_2_0(), semanticObject.getMonth());
		feeder.accept(grammarAccess.getDateAccess().getDayINTTerminalRuleCall_4_0(), semanticObject.getDay());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Employee returns Employee
	 *
	 * Constraint:
	 *     (name=ID date=Date salary=INT currentRole=EmployeeRole)
	 */
	protected void sequence_Employee(ISerializationContext context, Employee semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.EMPLOYEE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.EMPLOYEE__NAME));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.EMPLOYEE__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.EMPLOYEE__DATE));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.EMPLOYEE__SALARY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.EMPLOYEE__SALARY));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.EMPLOYEE__CURRENT_ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.EMPLOYEE__CURRENT_ROLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmployeeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEmployeeAccess().getDateDateParserRuleCall_4_0(), semanticObject.getDate());
		feeder.accept(grammarAccess.getEmployeeAccess().getSalaryINTTerminalRuleCall_6_0(), semanticObject.getSalary());
		feeder.accept(grammarAccess.getEmployeeAccess().getCurrentRoleEmployeeRoleParserRuleCall_8_0(), semanticObject.getCurrentRole());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transaction returns Transaction
	 *
	 * Constraint:
	 *     (account=ID amount=INT date=Date debit=Boolean vendorName=STRING)
	 */
	protected void sequence_Transaction(ISerializationContext context, Transaction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.TRANSACTION__ACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.TRANSACTION__ACCOUNT));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.TRANSACTION__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.TRANSACTION__AMOUNT));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.TRANSACTION__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.TRANSACTION__DATE));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.TRANSACTION__DEBIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.TRANSACTION__DEBIT));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.TRANSACTION__VENDOR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.TRANSACTION__VENDOR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransactionAccess().getAccountIDTerminalRuleCall_2_0(), semanticObject.getAccount());
		feeder.accept(grammarAccess.getTransactionAccess().getAmountINTTerminalRuleCall_4_0(), semanticObject.getAmount());
		feeder.accept(grammarAccess.getTransactionAccess().getDateDateParserRuleCall_6_0(), semanticObject.getDate());
		feeder.accept(grammarAccess.getTransactionAccess().getDebitBooleanParserRuleCall_8_0(), semanticObject.getDebit());
		feeder.accept(grammarAccess.getTransactionAccess().getVendorNameSTRINGTerminalRuleCall_10_0(), semanticObject.getVendorName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     User returns User
	 *
	 * Constraint:
	 *     (name=ID email=STRING hashpass=STRING address=STRING)
	 */
	protected void sequence_User(ISerializationContext context, User semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.USER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.USER__NAME));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.USER__EMAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.USER__EMAIL));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.USER__HASHPASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.USER__HASHPASS));
			if (transientValues.isValueTransient(semanticObject, BankSystemPackage.Literals.USER__ADDRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BankSystemPackage.Literals.USER__ADDRESS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUserAccess().getEmailSTRINGTerminalRuleCall_5_0(), semanticObject.getEmail());
		feeder.accept(grammarAccess.getUserAccess().getHashpassSTRINGTerminalRuleCall_7_0(), semanticObject.getHashpass());
		feeder.accept(grammarAccess.getUserAccess().getAddressSTRINGTerminalRuleCall_9_0(), semanticObject.getAddress());
		feeder.finish();
	}
	
	
}
