/**
 * generated by Xtext 2.14.0
 */
package org.xtext.bankSystem.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.bankSystem.Account;
import org.xtext.bankSystem.Bank;
import org.xtext.bankSystem.BankSystemPackage;
import org.xtext.bankSystem.Branch;
import org.xtext.bankSystem.Transaction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bank</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.bankSystem.impl.BankImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.bankSystem.impl.BankImpl#getCountryOfOrigin <em>Country Of Origin</em>}</li>
 *   <li>{@link org.xtext.bankSystem.impl.BankImpl#getBranches <em>Branches</em>}</li>
 *   <li>{@link org.xtext.bankSystem.impl.BankImpl#getAccounts <em>Accounts</em>}</li>
 *   <li>{@link org.xtext.bankSystem.impl.BankImpl#getTransactions <em>Transactions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BankImpl extends MinimalEObjectImpl.Container implements Bank
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getCountryOfOrigin() <em>Country Of Origin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCountryOfOrigin()
   * @generated
   * @ordered
   */
  protected static final String COUNTRY_OF_ORIGIN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCountryOfOrigin() <em>Country Of Origin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCountryOfOrigin()
   * @generated
   * @ordered
   */
  protected String countryOfOrigin = COUNTRY_OF_ORIGIN_EDEFAULT;

  /**
   * The cached value of the '{@link #getBranches() <em>Branches</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBranches()
   * @generated
   * @ordered
   */
  protected EList<Branch> branches;

  /**
   * The cached value of the '{@link #getAccounts() <em>Accounts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccounts()
   * @generated
   * @ordered
   */
  protected EList<Account> accounts;

  /**
   * The cached value of the '{@link #getTransactions() <em>Transactions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransactions()
   * @generated
   * @ordered
   */
  protected EList<Transaction> transactions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BankImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BankSystemPackage.Literals.BANK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BankSystemPackage.BANK__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCountryOfOrigin()
  {
    return countryOfOrigin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCountryOfOrigin(String newCountryOfOrigin)
  {
    String oldCountryOfOrigin = countryOfOrigin;
    countryOfOrigin = newCountryOfOrigin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BankSystemPackage.BANK__COUNTRY_OF_ORIGIN, oldCountryOfOrigin, countryOfOrigin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Branch> getBranches()
  {
    if (branches == null)
    {
      branches = new EObjectContainmentEList<Branch>(Branch.class, this, BankSystemPackage.BANK__BRANCHES);
    }
    return branches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Account> getAccounts()
  {
    if (accounts == null)
    {
      accounts = new EObjectContainmentEList<Account>(Account.class, this, BankSystemPackage.BANK__ACCOUNTS);
    }
    return accounts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Transaction> getTransactions()
  {
    if (transactions == null)
    {
      transactions = new EObjectContainmentEList<Transaction>(Transaction.class, this, BankSystemPackage.BANK__TRANSACTIONS);
    }
    return transactions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BankSystemPackage.BANK__BRANCHES:
        return ((InternalEList<?>)getBranches()).basicRemove(otherEnd, msgs);
      case BankSystemPackage.BANK__ACCOUNTS:
        return ((InternalEList<?>)getAccounts()).basicRemove(otherEnd, msgs);
      case BankSystemPackage.BANK__TRANSACTIONS:
        return ((InternalEList<?>)getTransactions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BankSystemPackage.BANK__NAME:
        return getName();
      case BankSystemPackage.BANK__COUNTRY_OF_ORIGIN:
        return getCountryOfOrigin();
      case BankSystemPackage.BANK__BRANCHES:
        return getBranches();
      case BankSystemPackage.BANK__ACCOUNTS:
        return getAccounts();
      case BankSystemPackage.BANK__TRANSACTIONS:
        return getTransactions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BankSystemPackage.BANK__NAME:
        setName((String)newValue);
        return;
      case BankSystemPackage.BANK__COUNTRY_OF_ORIGIN:
        setCountryOfOrigin((String)newValue);
        return;
      case BankSystemPackage.BANK__BRANCHES:
        getBranches().clear();
        getBranches().addAll((Collection<? extends Branch>)newValue);
        return;
      case BankSystemPackage.BANK__ACCOUNTS:
        getAccounts().clear();
        getAccounts().addAll((Collection<? extends Account>)newValue);
        return;
      case BankSystemPackage.BANK__TRANSACTIONS:
        getTransactions().clear();
        getTransactions().addAll((Collection<? extends Transaction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BankSystemPackage.BANK__NAME:
        setName(NAME_EDEFAULT);
        return;
      case BankSystemPackage.BANK__COUNTRY_OF_ORIGIN:
        setCountryOfOrigin(COUNTRY_OF_ORIGIN_EDEFAULT);
        return;
      case BankSystemPackage.BANK__BRANCHES:
        getBranches().clear();
        return;
      case BankSystemPackage.BANK__ACCOUNTS:
        getAccounts().clear();
        return;
      case BankSystemPackage.BANK__TRANSACTIONS:
        getTransactions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BankSystemPackage.BANK__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case BankSystemPackage.BANK__COUNTRY_OF_ORIGIN:
        return COUNTRY_OF_ORIGIN_EDEFAULT == null ? countryOfOrigin != null : !COUNTRY_OF_ORIGIN_EDEFAULT.equals(countryOfOrigin);
      case BankSystemPackage.BANK__BRANCHES:
        return branches != null && !branches.isEmpty();
      case BankSystemPackage.BANK__ACCOUNTS:
        return accounts != null && !accounts.isEmpty();
      case BankSystemPackage.BANK__TRANSACTIONS:
        return transactions != null && !transactions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", countryOfOrigin: ");
    result.append(countryOfOrigin);
    result.append(')');
    return result.toString();
  }

} //BankImpl
