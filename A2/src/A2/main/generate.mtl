[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http:///urn.ecore','http:///grl.ecore', 'http:///ucm.ecore', 'http:///urncore.ecore', 'http:///asd.ecore', 'http:///fm.ecore', 'http:///ucmscenarios.ecore' )]
[**
 * The documentation of the template generateElement.
 * @param anURNlink
 */]
[template public generateElement(anURNspec : URNspec)]
[comment @main/]
[file (anURNspec.fileName(), false, 'UTF-8')]
[grlSpec(anURNspec.grlspec, anURNspec.urndef) /]
[/file]
[/template]
[template public test(node:IURNNode) ]
[getAtt(node, 'name')/]
[/template]

[template public grlSpec(aGRLspec : GRLspec, anURNdef: URNdefinition) post (trim())]
	[for (elem: IntentionalElement |aGRLspec.intElements)]
		[if (isFeature(elem) and isRoot(elem.linksSrc))]
[rootFeature(elem, aGRLspec)/]
		[/if]
	[/for]

	[for (actor : Actor | aGRLspec.actors) separator ('\n')]
[actor(actor, aGRLspec,anURNdef) /]
	[/for]

[/template]

[template public rootFeature(anIntElem: IntentionalElement, aGRLspec : GRLspec) post (trim())]
features [featureNode(anIntElem)/]
[/template]

[template public children(links: OrderedSet(ElementLink)) post (trim())]
	[for (link:ElementLink |links)]
[linkType(link) /] [featureNode(cast(link.src))/]
	[/for]
[/template]

[template public featureNode(elem: IntentionalElement) post (trim())]
[elem.name /] [decompositionType(elem) /]  [if (hasChildren(elem.linksDest))]
{
	[children(elem.linksDest)/]
}
	[/if]
[/template]

[template public linkType(link : ElementLink) post (trim())]
[if (link.oclIsTypeOf(MandatoryFMLink))]mandatory[/if]
[if (link.oclIsTypeOf(OptionalFMLink))]optional[/if]
[/template]

[template public decompositionType(elem:IntentionalElement) post (trim())]
[if (elem.decompositionType.toString().startsWith('Or'))]OR[/if]
[if (elem.decompositionType.toString().startsWith('Xor'))]XOR[/if]
[/template]

[template public actor(actor:Actor, aGRLspec : GRLspec, anURNdef: URNdefinition) post (trim())]
actor [actor.name/] {
[for (contained: IURNContainerRef| actor.contRefs)]
[actorContained(contained, aGRLspec, anURNdef) /]
[/for]
}
[/template]

[template public actorContained(contained: IURNContainerRef,aGRLspec : GRLspec, anURNdef: URNdefinition) post (trim())]
[for (node:IURNNode |contained.nodes)]
[for (elem: IntentionalElement |findElem(node))]
	[actorElement(elem) /]
[/for]
[/for]
[/template]

[template public actorElement(elem:IntentionalElement) post (trim())]
[elem.type.toString().toLowerCase()/] [elem.name/] [if (hasContents(elem))]{
[if (not (elem.importance.toString() = 'None'))]
	importance [elem.importanceQuantitative/]
[/if]
[for (link: ElementLink | elem.linksSrc)]
	[actorLinks(elem, link)/]
[/for]
[for (link:ElementLink | dependencies(elem.linksDest))]
	[dependLink(link)/]
[/for]
}
[/if]
[/template]
[template public actorLinks(elem:IntentionalElement ,link:ElementLink) post (trim())]
[if (link.oclIsTypeOf(Contribution))]
contributesTo [link.dest.name/][if (getAtt(link, 'correlation').equalsIgnoreCase('true'))] correlated[/if] with [link.getAtt('quantitativeContribution')/]
[/if]
[if (link.oclIsTypeOf(Decomposition))]
[cast(link.dest).decompositionType /] decomposes [link.dest.name/]
[/if]
[/template]

[template public dependLink(link:ElementLink) post (trim())]
dependsOn [containingActor(cast(link.src)).name/].[link.src.name /]
[/template]

[query public fileName(anURNspec : URNspec) : String = 
	'both.txt'
/]

[query public hasChildren(links:OrderedSet(ElementLink)): Boolean =
	not links -> isEmpty()
/]

[query public isRoot(links:OrderedSet(ElementLink)): Boolean =
	links -> isEmpty()
/]

[query public isFeature(elem:IntentionalElement) : Boolean =
	elem.oclIsTypeOf(Feature)
/]

[query public cast(elem:GRLLinkableElement) : IntentionalElement =
	elem.oclAsType(IntentionalElement)
/]


[query public getAtt(link:ElementLink, attribute:String): String=
	link.eGet(attribute) ->toString()
/]

[query public getAtt(node: IURNNode, attribute:String): String=
	node.eGet(attribute)
/]

[query public getAtt(elem: IntentionalElement, attribute:String): String=
	elem.eGet(attribute)
/]

[query public getAtt(ref: IntentionalElementRef, attribute:String) : String =
	ref.eGet(attribute)
/]

[query public getAtt(contRef : IURNContainerRef, attribute:String) : String =
	contRef.eGet(attribute)
/]

[query public findElem(node:IURNNode): OrderedSet(IntentionalElement) = 
	node.diagram.urndefinition.urnspec.grlspec.intElements ->select(i|hasRef(node, i))
/]

[query public hasRef(node:IURNNode, elem:IntentionalElement) : Boolean =
	not ((elem.refs -> select(r| r=node )) ->isEmpty())
/]

[query public hasContents(elem: IntentionalElement) : Boolean = 
	(not (elem.importance.toString() = 'None')) or (not (elem.linksSrc -> isEmpty())) or hasDependency(elem.linksDest)
/]

[query public hasDependency(links:OrderedSet(ElementLink)) : Boolean =
	not (dependencies(links) ->isEmpty())
/]

[query public dependencies(links:OrderedSet(ElementLink)) : OrderedSet(ElementLink) = 
	links -> select(x | x.name.startsWith('Dependency'))
/]

[query public containingActor(elem:IntentionalElement) : Actor = 
	elem.refs.contRef.contDef ->first()
/]